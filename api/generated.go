// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
	"time"
)

// Contract defines component schema for Contract.
type Contract struct {
	Language           Language `json:"language"`
	SignerAttributes   []string `json:"signer_attributes,omitempty"`
	Template           *string  `json:"template,omitempty"`
	TemplateAttributes []string `json:"template_attributes,omitempty"`
	Type               Type     `json:"type"`
	Version            Version  `json:"version"`
}

// ContractSigningRequest defines component schema for ContractSigningRequest.
type ContractSigningRequest struct {
	Language  Language   `json:"language"`
	Type      Type       `json:"type"`
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	ValidTo   *time.Time `json:"valid_to,omitempty"`
	Version   Version    `json:"version"`
}

// CreateSessionResult defines component schema for CreateSessionResult.
type CreateSessionResult struct {
	QrCodeInfo IrmaQR `json:"qr_code_info"`
	SessionId  string `json:"session_id"`
}

// DisclosedAttribute defines component schema for DisclosedAttribute.
type DisclosedAttribute struct {
	Identifier string                 `json:"identifier"`
	Rawvalue   *string                `json:"rawvalue,omitempty"`
	Status     string                 `json:"status"`
	Value      map[string]interface{} `json:"value"`
}

// DisclosedAttributeIndex defines component schema for DisclosedAttributeIndex.
type DisclosedAttributeIndex struct {
	Attr *int32 `json:"attr,omitempty"`
	Cred *int32 `json:"cred,omitempty"`
}

// ErrorString defines component schema for ErrorString.
type ErrorString string

// IrmaQR defines component schema for IrmaQR.
type IrmaQR struct {
	Irmaqr string `json:"irmaqr"`
	U      string `json:"u"`
}

// Language defines component schema for Language.
type Language string

// Proof defines component schema for Proof.
type Proof interface{}

// ProofD defines component schema for ProofD.
type ProofD struct {
	A          *float32                `json:"A,omitempty"`
	ADisclosed *map[string]interface{} `json:"a_disclosed,omitempty"`
	AResponses *map[string]interface{} `json:"a_responses,omitempty"`
	C          *float32                `json:"c,omitempty"`
	EResponse  *float32                `json:"e_response,omitempty"`
	VResponse  *float32                `json:"v_response,omitempty"`
}

// ProofP defines component schema for ProofP.
type ProofP struct {
	P         *float32 `json:"P,omitempty"`
	C         *float32 `json:"c,omitempty"`
	SResponse *float32 `json:"s_response,omitempty"`
}

// ProofS defines component schema for ProofS.
type ProofS struct {
	C         *float32 `json:"c,omitempty"`
	EResponse *float32 `json:"e_response,omitempty"`
}

// ProofU defines component schema for ProofU.
type ProofU struct {
	U              *float32 `json:"U,omitempty"`
	C              *float32 `json:"c,omitempty"`
	SResponse      *float32 `json:"s_response,omitempty"`
	VPrimeResponse *float32 `json:"v_prime_response,omitempty"`
}

// RemoteError defines component schema for RemoteError.
type RemoteError struct {
	Description *string `json:"description,omitempty"`
	Error       *string `json:"error,omitempty"`
	Message     *string `json:"message,omitempty"`
	Stacktrace  *string `json:"stacktrace,omitempty"`
	Status      *int32  `json:"status,omitempty"`
}

// SessionResult defines component schema for SessionResult.
type SessionResult struct {
	Disclosed     []DisclosedAttribute `json:"disclosed,omitempty"`
	Error         *RemoteError         `json:"error,omitempty"`
	NutsAuthToken *string              `json:"nuts_auth_token,omitempty"`
	ProofStatus   *string              `json:"proofStatus,omitempty"`
	Signature     *SignedMessage       `json:"signature,omitempty"`
	Status        string               `json:"status"`
	Token         string               `json:"token"`
	Type          string               `json:"type"`
}

// SignedMessage defines component schema for SignedMessage.
type SignedMessage struct {
	Context   *float32                    `json:"context,omitempty"`
	Indices   [][]DisclosedAttributeIndex `json:"indices,omitempty"`
	Message   *string                     `json:"message,omitempty"`
	Nonce     *float32                    `json:"nonce,omitempty"`
	Signature []interface{}               `json:"signature,omitempty"`
	Timestamp *Timestamp                  `json:"timestamp,omitempty"`
}

// Timestamp defines component schema for Timestamp.
type Timestamp struct {
	Time *int64 `json:"time,omitempty"`
}

// Type defines component schema for Type.
type Type string

// ValidationRequest defines component schema for ValidationRequest.
type ValidationRequest struct {
	ActingPartyCn  *string `json:"acting_party_cn,omitempty"`
	ContractFormat *string `json:"contract_format,omitempty"`
	ContractString *string `json:"contract_string,omitempty"`
}

// ValidationResult defines component schema for ValidationResult.
type ValidationResult struct {
	ContractFormat   *string                 `json:"contract_format,omitempty"`
	SignerAttributes *map[string]interface{} `json:"signer_attributes,omitempty"`
	ValidationResult *string                 `json:"validation_result,omitempty"`
}

// Version defines component schema for Version.
type Version string

// NutsAuthGetContractByTypeParams defines parameters for NutsAuthGetContractByType.
type NutsAuthGetContractByTypeParams struct {
	Version  *string `json:"version,omitempty"`
	Language *string `json:"language,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// CreateSessionHandler Initiates an IRMA signing session with the correct contract. (POST /auth/contract/session)
	NutsAuthCreateSession(ctx echo.Context) error
	// returns the result of the contract request (GET /auth/contract/session/{id})
	NutsAuthSessionRequestStatus(ctx echo.Context, id string) error
	// Validate a Nuts Security Contract (POST /auth/contract/validate)
	NutsAuthValidateContract(ctx echo.Context) error
	// Get a contract by type and version (GET /auth/contract/{contractType})
	NutsAuthGetContractByType(ctx echo.Context, contractType string, params NutsAuthGetContractByTypeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NutsAuthCreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) NutsAuthCreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsAuthCreateSession(ctx)
	return err
}

// NutsAuthSessionRequestStatus converts echo context to params.
func (w *ServerInterfaceWrapper) NutsAuthSessionRequestStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsAuthSessionRequestStatus(ctx, id)
	return err
}

// NutsAuthValidateContract converts echo context to params.
func (w *ServerInterfaceWrapper) NutsAuthValidateContract(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsAuthValidateContract(ctx)
	return err
}

// NutsAuthGetContractByType converts echo context to params.
func (w *ServerInterfaceWrapper) NutsAuthGetContractByType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractType" -------------
	var contractType string

	err = runtime.BindStyledParameter("simple", false, "contractType", ctx.Param("contractType"), &contractType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractType: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NutsAuthGetContractByTypeParams
	// ------------- Optional query parameter "version" -------------
	if paramValue := ctx.QueryParam("version"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "language" -------------
	if paramValue := ctx.QueryParam("language"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsAuthGetContractByType(ctx, contractType, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth/contract/session", wrapper.NutsAuthCreateSession)
	router.GET("/auth/contract/session/:id", wrapper.NutsAuthSessionRequestStatus)
	router.POST("/auth/contract/validate", wrapper.NutsAuthValidateContract)
	router.GET("/auth/contract/:contractType", wrapper.NutsAuthGetContractByType)

}

